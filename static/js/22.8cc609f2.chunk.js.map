{"version":3,"sources":["pages/storage/frozen/form/conversion/index.js"],"names":["Option","Select","ProcessConversion","state","conversionItemDetails","inputItemSelectOption","outputItemSelectOption","quantityWeightMeasurementUnit","quantityVolumeMeasurementUnit","formRefInput","React","createRef","onInputItemChange","event","frozenItemStock","props","current","setFieldsValue","outputItemName","undefined","item","filter","data","item_name","group","type","map","o","value","key","quantity_weight","quantity_volume","setState","onFinish","values","setFrozenItemStock","keyId","length","push","inputItemName","quantityWeight","quantityVolume","updateFrozenItemStockQuantity","onButtonAddClick","conversionId","notification","error","message","payload","storageSource","items","processItemConversion","itemStock","itemName","temp","Object","assign","this","generateConversionId","getFrozenItemStock","today","Date","toLocaleDateString","title","className","labelCol","xs","span","sm","wrapperCol","ref","labelAlign","Item","name","label","placeholder","disabled","id","rules","required","onChange","addonAfter","columns","width","dataIndex","dataSource","to","onClick","Component","connect","storage","dispatch"],"mappings":"4SAOQA,G,OAAWC,IAAXD,QAoCFE,E,4MACJC,MAAQ,CACNC,sBAAuB,KACvBC,sBAAuB,KACvBC,uBAAwB,KACxBC,8BAA+B,KAC/BC,8BAA+B,M,EAGjCC,aAAeC,IAAMC,Y,EAQrBC,kBAAoB,SAACC,GAAW,IAE1BL,EACAD,EAFIO,EAAmB,EAAKC,MAAxBD,gBAIR,EAAKL,aAAaO,QAAQC,eAAe,CACvCC,oBAAgBC,IAGlB,IAAMC,EAAON,EAAgBO,QAAO,SAAAC,GAClC,OAAOA,EAAKC,YAAcV,KAOtBP,EAHiBQ,EAAgBO,QAAO,SAAAC,GAC5C,MAAsB,UAAfA,EAAKE,OAAmC,SAAdF,EAAKG,MAAmBH,EAAKC,YAAcV,KAEhCa,KAAI,SAAAC,GAAC,OACjD,kBAAC3B,EAAD,CAAQ4B,MAAOD,EAAEJ,UAAWM,IAAKF,EAAEJ,WAAnC,UAAsDI,EAAEJ,cAG1DhB,EAA6B,sBAAkBa,EAAK,GAAGU,iBACvDtB,EAA6B,wBAAoBY,EAAK,GAAGW,iBAEzD,EAAKC,SAAS,CACZ1B,yBACAC,gCACAC,mC,EAIJyB,SAAW,SAAAC,GAAW,IAAD,EAC6B,EAAKnB,MAA7CD,EADW,EACXA,gBAAiBqB,EADN,EACMA,mBACnB/B,EAA0B,EAAKD,MAA/BC,sBAEN,EAAK4B,SAAS,CACZ5B,sBAAuB,KAGzB,IAAIgC,EAAQ,EACiB,OAA1BhC,EAEDA,EAAwB,GAEjBA,EAAsBiC,OAAS,IAEtCD,EAAQhC,EAAsBA,EAAsBiC,OAAO,GAAGR,IAAM,GAGtEzB,EAAsBkC,KAAK,CACzBT,IAAKO,EACLG,cAAeL,EAAOK,cACtBrB,eAAgBgB,EAAOhB,eACvBsB,eAAgBN,EAAOM,eACvBC,eAAgBP,EAAOO,iBAKzBN,EAF+B,EAAKO,8BAA8B5B,EAAiBoB,EAAOK,cAAeL,EAAOM,eAAgBN,EAAOO,iBAIvI,EAAKT,SAAS,CACZ5B,wBACAG,8BAA+B,KAC/BC,8BAA+B,SAGjC,EAAKC,aAAaO,QAAQC,eAAe,CACvCsB,mBAAepB,EACfD,oBAAgBC,EAChBqB,oBAAgBrB,EAChBsB,oBAAgBtB,K,EAIpBwB,iBAAmB,WAAO,IAChBC,EAAiB,EAAK7B,MAAtB6B,aACAxC,EAA0B,EAAKD,MAA/BC,sBAER,GAA8B,OAA1BA,GAAkCA,EAAsBiC,OAAS,EAEnEQ,IAAaC,MAAM,CACjBC,QAAS,mDAHb,CAQA,IAAMC,EACJ,CACEJ,eACAK,cAAe,SACfC,MAAO9C,IAMX+C,EAHkC,EAAKpC,MAA/BoC,uBAGcH,K,EAGxBN,8BAAgC,SAACU,EAAWC,EAAUb,EAAgBC,GAClE,OAAOW,EAAU1B,KAAI,SAAAN,GACjB,IAAMkC,EAAOC,OAAOC,OAAO,GAAIpC,GAK/B,OAJIkC,EAAK/B,YAAc8B,IACnBC,EAAKxB,iBAAmBU,EACxBc,EAAKvB,iBAAmBU,GAErBa,M,kEAjHM,IAAD,EACkCG,KAAK1C,MAAjD2C,EADU,EACVA,qBAAsBC,EADZ,EACYA,mBAC9BD,IACAC,M,+BAmHA,IADO,EAuCkCF,KAAK1C,MAAtC6B,EAvCD,EAuCCA,aAAc9B,EAvCf,EAuCeA,gBAGhB8C,GADW,IAAIC,MACEC,mBAAmB,SA1CnC,EAmDAL,KAAKtD,MALRC,EA9CG,EA8CHA,sBACAC,EA/CG,EA+CHA,sBACAC,EAhDG,EAgDHA,uBACAC,EAjDG,EAiDHA,8BACAC,EAlDG,EAkDHA,+BAGJD,EAAgCA,GAAiC,KACjEC,EAAgCA,GAAiC,OAEjEH,EAAwBA,GAAyB,GACjDC,EAAyBA,GAA0B,GACnDF,EAAwBA,GAAyB,GAE9CU,EAAgBuB,OAAS,KAQ1BhC,EALsBS,EAAgBO,QAAO,SAAAC,GAC3C,MAAsB,UAAfA,EAAKE,OAAmC,SAAdF,EAAKG,MAAmBH,EAAKS,gBAAkB,GAAKT,EAAKQ,gBAAkB,KAIxEJ,KAAI,SAAAC,GAAC,OACzC,kBAAC3B,EAAD,CAAQ4B,MAAOD,EAAEJ,UAAWM,IAAKF,EAAEJ,WAAnC,UAAsDI,EAAEJ,eAI5D,OACE,6BACE,kBAAC,IAAD,CAAQwC,MAAM,yBACd,yBAAKC,UAAU,uBACb,gDAEF,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,iBArDe,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MA8CR,CAEEG,IAAKb,KAAKhD,aACV8D,WAAW,OACXtC,SAAUwB,KAAKxB,WAEf,kBAAC,IAAKuC,KAAN,CAAWC,KAAK,eAAeC,MAAM,iBACnC,kBAAC,IAAD,CAAOC,YAAa/B,EAAcgC,UA7CtB,KA+Cd,kBAAC,IAAKJ,KAAN,CAAWC,KAAK,YAAYC,MAAM,WAChC,kBAAC,IAAD,CAAOC,YAAaf,EAAOgB,UAhDf,KAkDd,kBAAC,IAAKJ,KAAN,CAAWK,GAAG,gBAAgBJ,KAAK,gBAAgBC,MAAM,YAAYI,MAAO,CAAC,CAAEC,UAAU,EAAMhC,QAAS,wBACtG,kBAAC,IAAD,CAAQiC,SAAUvB,KAAK7C,kBAAmB+D,YAAY,cACnDtE,IAGL,kBAAC,IAAKmE,KAAN,CAAWC,KAAK,iBAAiBC,MAAM,WAAWI,MAAO,CAAC,CAAEC,UAAU,EAAMhC,QAAS,0BACnF,kBAAC,IAAD,CAAOtB,KAAK,SAASkD,YAAY,oBAAoBM,WAAY1E,KAEnE,kBAAC,IAAKiE,KAAN,CAAWC,KAAK,iBAAiBC,MAAM,WAAWI,MAAO,CAAC,CAAEC,UAAU,EAAMhC,QAAS,0BACnF,kBAAC,IAAD,CAAOtB,KAAK,SAASkD,YAAY,oBAAoBM,WAAYzE,KAEnE,yBAAKwD,UAAU,uBACb,+CAEF,kBAAC,IAAKQ,KAAN,CAAWK,GAAG,iBAAiBJ,KAAK,iBAAiBC,MAAM,YAAYI,MAAO,CAAC,CAAEC,UAAU,EAAMhC,QAAS,wBACxG,kBAAC,IAAD,CAAQ4B,YAAY,cACjBrE,IAGL,4BAAQmB,KAAK,SAASuC,UAAU,mBAAhC,yBAGA,6BACE,8BAEF,yBAAKA,UAAU,gCACb,kBAAC,IAAD,CAAOkB,QAtHH,CACd,CACEnB,MAAO,iBACPoB,MAAO,IACPC,UAAW,gBACXvD,IAAK,iBAEP,CACEkC,MAAO,kBACPoB,MAAO,IACPC,UAAW,iBACXvD,IAAK,kBAEP,CACEkC,MAAO,WACPoB,MAAO,IACPC,UAAW,iBACXvD,IAAK,kBAEP,CACEkC,MAAO,iBACPoB,MAAO,IACPC,UAAW,iBACXvD,IAAK,mBA+F4BwD,WAAYjF,MAGzC,yBAAK4D,UAAU,0CACb,kBAAC,IAAD,CAAMsB,GAAG,kBAAkBtB,UAAU,iCACnC,uBAAGA,UAAU,uCADf,WAIA,kBAAC,IAAD,CAAQuB,QAAS9B,KAAKd,iBAAkBqB,UAAU,qDAAlD,kB,GA/PkBtD,IAAM8E,WA0QvBC,uBA5SS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,MAAkB,CACxC9C,aAAc8C,EAAQ9C,aACtB9B,gBAAiB4E,EAAQ5E,oBAGA,SAAA6E,GACzB,MAAO,CACLjC,qBAAsB,WACpBiC,EAAS,CACPlE,KAAM,oCAGVkC,mBAAoB,WAClBgC,EAAS,CACPlE,KAAM,mCAGV0B,sBAAuB,SAACH,GACtB2C,EAAS,CACPlE,KAAM,kCACNuB,aAGJb,mBAAoB,SAACrB,GACnB6E,EAAS,CACPlE,KAAM,oBACNuB,QAAS,CACPlC,yBAiRK2E,CAA6CvF","file":"static/js/22.8cc609f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Table, Input, Select, Form, Button, notification } from 'antd';\r\nimport './style.module.css';\r\n\r\nconst { Option } = Select\r\n\r\nconst mapStateToProps = ({ storage }) => ({\r\n  conversionId: storage.conversionId,\r\n  frozenItemStock: storage.frozenItemStock,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    generateConversionId: () => {\r\n      dispatch({\r\n        type: 'storage/GENERATE_CONVERSION_ID',\r\n      })\r\n    },\r\n    getFrozenItemStock: () => {\r\n      dispatch({\r\n        type: 'storage/GET_FROZEN_ITEM_STOCK'\r\n      })\r\n    },\r\n    processItemConversion: (payload) => {\r\n      dispatch({\r\n        type: 'storage/PROCESS_ITEM_CONVERSION',\r\n        payload,\r\n      })\r\n    },\r\n    setFrozenItemStock: (frozenItemStock) => {\r\n      dispatch({\r\n        type: 'storage/SET_STATE',\r\n        payload: {\r\n          frozenItemStock,\r\n        }\r\n      })\r\n    },\r\n  }\r\n}\r\n\r\nclass ProcessConversion extends React.Component {\r\n  state = {\r\n    conversionItemDetails: null,\r\n    inputItemSelectOption: null,\r\n    outputItemSelectOption: null,\r\n    quantityWeightMeasurementUnit: null,\r\n    quantityVolumeMeasurementUnit: null,\r\n  }\r\n\r\n  formRefInput = React.createRef();\r\n\r\n  componentDidMount() {\r\n    const { generateConversionId, getFrozenItemStock }= this.props;\r\n    generateConversionId();\r\n    getFrozenItemStock();\r\n  }\r\n\r\n  onInputItemChange = (event) => {\r\n    const { frozenItemStock }= this.props;\r\n    let quantityVolumeMeasurementUnit = \"\";\r\n    let quantityWeightMeasurementUnit = \"\";\r\n\r\n    this.formRefInput.current.setFieldsValue({\r\n      outputItemName: undefined,\r\n    })\r\n\r\n    const item = frozenItemStock.filter(data => {\r\n      return data.item_name === event\r\n    })\r\n\r\n    // Populate Input item list\r\n    const outputItemData = frozenItemStock.filter(data => {\r\n      return data.group === \"whole\" && data.type === \"main\" && data.item_name !== event;\r\n    })\r\n    const outputItemSelectOption = outputItemData.map(o => (\r\n      <Option value={o.item_name} key={o.item_name}>FROZEN {o.item_name}</Option>\r\n    ))\r\n    \r\n    quantityWeightMeasurementUnit = `kg | Stok : ${item[0].quantity_weight}`\r\n    quantityVolumeMeasurementUnit = `Ekor | Stok : ${item[0].quantity_volume}`;\r\n\r\n    this.setState({\r\n      outputItemSelectOption,\r\n      quantityWeightMeasurementUnit,\r\n      quantityVolumeMeasurementUnit,\r\n    });\r\n  }\r\n\r\n  onFinish = values => {\r\n    const { frozenItemStock, setFrozenItemStock } = this.props;\r\n    let { conversionItemDetails } = this.state;\r\n\r\n    this.setState({\r\n      conversionItemDetails: [],\r\n    })\r\n\r\n    let keyId = 1;\r\n    if(conversionItemDetails === null)\r\n    {\r\n      conversionItemDetails = []\r\n    }\r\n    else if (conversionItemDetails.length > 0)\r\n    {\r\n      keyId = conversionItemDetails[conversionItemDetails.length-1].key + 1;\r\n    }\r\n\r\n    conversionItemDetails.push({\r\n      key: keyId,\r\n      inputItemName: values.inputItemName,\r\n      outputItemName: values.outputItemName,\r\n      quantityWeight: values.quantityWeight,\r\n      quantityVolume: values.quantityVolume,\r\n    })\r\n\r\n    const updatedFrozenItemStock = this.updateFrozenItemStockQuantity(frozenItemStock, values.inputItemName, values.quantityWeight, values.quantityVolume);\r\n\r\n    setFrozenItemStock(updatedFrozenItemStock);\r\n\r\n    this.setState({\r\n      conversionItemDetails,\r\n      quantityWeightMeasurementUnit: 'kg',\r\n      quantityVolumeMeasurementUnit: 'Ekor',\r\n    })\r\n\r\n    this.formRefInput.current.setFieldsValue({\r\n      inputItemName: undefined,\r\n      outputItemName: undefined,\r\n      quantityWeight: undefined,\r\n      quantityVolume: undefined,\r\n    });\r\n  }\r\n\r\n  onButtonAddClick = () => {\r\n    const { conversionId } = this.props;\r\n    const { conversionItemDetails } = this.state;\r\n    \r\n    if( conversionItemDetails === null || conversionItemDetails.length < 1)\r\n    {\r\n      notification.error({\r\n        message: 'Silahkan pilih item yang ingin di konversi'\r\n      })\r\n      return;\r\n    }\r\n\r\n    const payload = \r\n      {\r\n        conversionId,\r\n        storageSource: \"frozen\",\r\n        items: conversionItemDetails,\r\n      }      \r\n\r\n    const { processItemConversion } = this.props;\r\n\r\n    // send data to backend\r\n    processItemConversion(payload);\r\n  }\r\n\r\n  updateFrozenItemStockQuantity = (itemStock, itemName, quantityWeight, quantityVolume) => {\r\n      return itemStock.map(item => {\r\n          const temp = Object.assign({}, item);\r\n          if (temp.item_name === itemName) {\r\n              temp.quantity_weight -= quantityWeight;\r\n              temp.quantity_volume -= quantityVolume;\r\n          }\r\n          return temp;\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: 'Nama Item Asal',\r\n        width: 100,\r\n        dataIndex: 'inputItemName',\r\n        key: 'inputItemName',\r\n      },\r\n      {\r\n        title: 'Nama Item Hasil',\r\n        width: 100,\r\n        dataIndex: 'outputItemName',\r\n        key: 'outputItemName',\r\n      },\r\n      {\r\n        title: 'Qty (kg)',\r\n        width: 100,\r\n        dataIndex: 'quantityWeight',\r\n        key: 'quantityWeight',\r\n      },\r\n      {\r\n        title: 'Qty (Ekor/Pax)',\r\n        width: 100,\r\n        dataIndex: 'quantityVolume',\r\n        key: 'quantityVolume',\r\n      },\r\n    ]\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 4 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 12 },\r\n      },\r\n    }\r\n\r\n    const { conversionId, frozenItemStock }= this.props;\r\n\r\n    const fullDate = new Date();\r\n    const today = fullDate.toLocaleDateString(\"en-US\")\r\n    const isInputDisabled = true;\r\n\r\n    let { \r\n        conversionItemDetails,\r\n        inputItemSelectOption,\r\n        outputItemSelectOption, \r\n        quantityWeightMeasurementUnit,\r\n        quantityVolumeMeasurementUnit,\r\n       } = this.state\r\n\r\n    quantityWeightMeasurementUnit = quantityWeightMeasurementUnit || \"kg\";\r\n    quantityVolumeMeasurementUnit = quantityVolumeMeasurementUnit || \"Ekor\";\r\n\r\n    inputItemSelectOption = inputItemSelectOption || [];\r\n    outputItemSelectOption = outputItemSelectOption || [];\r\n    conversionItemDetails = conversionItemDetails || [];\r\n    \r\n    if(frozenItemStock.length > 0)\r\n    {\r\n\r\n      const inputItemData = frozenItemStock.filter(data => {\r\n        return data.group === \"whole\" && data.type === \"main\" && data.quantity_volume > 0 && data.quantity_weight > 0;\r\n      })\r\n\r\n      // Populate Input item list\r\n      inputItemSelectOption = inputItemData.map(o => (\r\n        <Option value={o.item_name} key={o.item_name}>FROZEN {o.item_name}</Option>\r\n      ))\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Helmet title=\"Process / conversion\" />\r\n        <div className=\"kit__utils__heading\">\r\n          <h5>Proses Konversi</h5>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <Form \r\n              {...formItemLayout} \r\n              ref={this.formRefInput}\r\n              labelAlign=\"left\"\r\n              onFinish={this.onFinish}\r\n            >\r\n              <Form.Item name=\"conversionId\" label=\"Kode konversi\">\r\n                <Input placeholder={conversionId} disabled={isInputDisabled} />\r\n              </Form.Item>\r\n              <Form.Item name=\"dateToday\" label=\"Tanggal\">\r\n                <Input placeholder={today} disabled={isInputDisabled} />\r\n              </Form.Item>\r\n              <Form.Item id=\"inputItemName\" name=\"inputItemName\" label=\"Nama Item\" rules={[{ required: true, message: 'Item harus dipilih' }]}>\r\n                <Select onChange={this.onInputItemChange} placeholder=\"Pilih item\">\r\n                  {inputItemSelectOption}\r\n                </Select>\r\n              </Form.Item>\r\n              <Form.Item name=\"quantityWeight\" label=\"Quantity\" rules={[{ required: true, message: 'Quantity harus diisi' }]}>\r\n                <Input type=\"number\" placeholder=\"Masukkan quantity\" addonAfter={quantityWeightMeasurementUnit} />\r\n              </Form.Item>\r\n              <Form.Item name=\"quantityVolume\" label=\"Quantity\" rules={[{ required: true, message: 'Quantity harus diisi' }]}>\r\n                <Input type=\"number\" placeholder=\"Masukkan quantity\" addonAfter={quantityVolumeMeasurementUnit} />\r\n              </Form.Item>\r\n              <div className=\"kit__utils__heading\">\r\n                <h5>Hasil Konversi</h5>\r\n              </div>\r\n              <Form.Item id=\"outputItemName\" name=\"outputItemName\" label=\"Nama Item\" rules={[{ required: true, message: 'Item harus dipilih' }]}>\r\n                <Select placeholder=\"Pilih item\">\r\n                  {outputItemSelectOption}\r\n                </Select>\r\n              </Form.Item>\r\n              <button type=\"submit\" className=\"btn btn-success\">\r\n                Tambah Hasil Konversi\r\n              </button>\r\n              <div>\r\n                <br />\r\n              </div>\r\n              <div className=\"mb-4 kit__utils__scrollTable\">\r\n                <Table columns={columns} dataSource={conversionItemDetails} />\r\n              </div>\r\n            </Form>\r\n            <div className=\"border-top text-dark font-size-18 pt-4\">\r\n              <Link to=\"/storage/frozen\" className=\"kit__utils__link font-size-16\">\r\n                <i className=\"fe fe-arrow-left mr-1 align-middle\" />\r\n                Kembali\r\n              </Link>\r\n              <Button onClick={this.onButtonAddClick} className=\"btn btn-lg btn-success width-200 mb-2 float-right\">\r\n                Proses\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProcessConversion);\r\n"],"sourceRoot":""}